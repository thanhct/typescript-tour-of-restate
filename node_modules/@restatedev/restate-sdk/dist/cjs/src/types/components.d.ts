import * as d from "./discovery.js";
import type { ContextImpl } from "../context_impl.js";
import type { HandlerWrapper } from "./rpc.js";
import { HandlerKind } from "./rpc.js";
export interface Component {
    name(): string;
    handlerMatching(url: InvokePathComponents): ComponentHandler | undefined;
    discovery(): d.Service;
}
export interface ComponentHandler {
    name(): string;
    component(): Component;
    invoke(context: ContextImpl, input: Uint8Array): Promise<Uint8Array>;
    kind(): HandlerKind;
}
export declare class ServiceComponent implements Component {
    private readonly componentName;
    private readonly handlers;
    constructor(componentName: string);
    name(): string;
    add(name: string, handlerWrapper: HandlerWrapper): void;
    discovery(): d.Service;
    handlerMatching(url: InvokePathComponents): ComponentHandler | undefined;
}
export declare class ServiceHandler implements ComponentHandler {
    private readonly handlerName;
    private readonly parent;
    readonly handlerWrapper: HandlerWrapper;
    constructor(name: string, handlerWrapper: HandlerWrapper, parent: ServiceComponent);
    kind(): HandlerKind;
    invoke(context: ContextImpl, input: Uint8Array): Promise<Uint8Array>;
    name(): string;
    component(): Component;
}
export declare class VirtualObjectComponent implements Component {
    readonly componentName: string;
    private readonly handlers;
    constructor(componentName: string);
    name(): string;
    add(name: string, wrapper: HandlerWrapper): void;
    discovery(): d.Service;
    handlerMatching(url: InvokePathComponents): ComponentHandler | undefined;
}
export declare class VirtualObjectHandler implements ComponentHandler {
    private readonly componentName;
    private readonly parent;
    private readonly handlerWrapper;
    constructor(componentName: string, parent: VirtualObjectComponent, handlerWrapper: HandlerWrapper);
    name(): string;
    component(): Component;
    kind(): HandlerKind;
    invoke(context: ContextImpl, input: Uint8Array): Promise<Uint8Array>;
}
export declare class WorkflowComponent implements Component {
    readonly componentName: string;
    private readonly handlers;
    constructor(componentName: string);
    name(): string;
    add(name: string, wrapper: HandlerWrapper): void;
    discovery(): d.Service;
    handlerMatching(url: InvokePathComponents): ComponentHandler | undefined;
}
export declare class WorkflowHandler implements ComponentHandler {
    private readonly componentName;
    private readonly parent;
    private readonly handlerWrapper;
    constructor(componentName: string, parent: WorkflowComponent, handlerWrapper: HandlerWrapper);
    name(): string;
    component(): Component;
    kind(): HandlerKind;
    invoke(context: ContextImpl, input: Uint8Array): Promise<Uint8Array>;
}
export type PathComponents = InvokePathComponents | {
    type: "discover";
} | {
    type: "unknown";
    path: string;
};
export type InvokePathComponents = {
    type: "invoke";
    componentName: string;
    handlerName: string;
};
export declare function parseUrlComponents(urlPath?: string): PathComponents;
//# sourceMappingURL=components.d.ts.map