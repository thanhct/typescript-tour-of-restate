"use strict";
/*
 * Copyright (c) 2023-2024 - Restate Software, Inc., Restate GmbH
 *
 * This file is part of the Restate SDK for Node.js/TypeScript,
 * which is released under the MIT license.
 *
 * You can find a copy of the license in file LICENSE in the root
 * directory of this repository or package, or at
 * https://github.com/restatedev/sdk-typescript/blob/main/LICENSE
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeEndpoint = void 0;
const http2 = __importStar(require("http2"));
const lambda_js_1 = require("./handlers/lambda.js");
const endpoint_builder_js_1 = require("./endpoint_builder.js");
const generic_js_1 = require("./handlers/generic.js");
const node_stream_1 = require("node:stream");
const discovery_js_1 = require("../types/discovery.js");
const errors_js_1 = require("../types/errors.js");
class NodeEndpoint {
    builder = new endpoint_builder_js_1.EndpointBuilder();
    get keySet() {
        return this.builder.keySet;
    }
    componentByName(componentName) {
        return this.builder.componentByName(componentName);
    }
    addComponent(component) {
        this.builder.addComponent(component);
    }
    bindBundle(services) {
        services.registerServices(this);
        return this;
    }
    bind(definition) {
        this.builder.bind(definition);
        return this;
    }
    withIdentityV1(...keys) {
        this.builder.withIdentityV1(...keys);
        return this;
    }
    setLogger(logger) {
        this.builder.setLogger(logger);
        return this;
    }
    http2Handler() {
        const handler = new generic_js_1.GenericHandler(this.builder, discovery_js_1.ProtocolMode.BIDI_STREAM);
        return (request, response) => {
            (async () => {
                try {
                    const url = request.url;
                    const resp = await handler.handle({
                        url,
                        headers: request.headers,
                        body: node_stream_1.Readable.toWeb(request),
                        extraArgs: [],
                    });
                    response.writeHead(resp.statusCode, resp.headers);
                    const responseWeb = node_stream_1.Writable.toWeb(response);
                    await resp.body.pipeTo(responseWeb);
                    await new Promise((resolve) => response.end(resolve));
                }
                catch (e) {
                    const error = (0, errors_js_1.ensureError)(e);
                    this.builder.rlog.error("Error while handling connection: " + (error.stack ?? error.message));
                    response.destroy(error);
                }
            })().catch(() => { });
        };
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    lambdaHandler() {
        const genericHandler = new generic_js_1.GenericHandler(this.builder, discovery_js_1.ProtocolMode.REQUEST_RESPONSE);
        const handler = new lambda_js_1.LambdaHandler(genericHandler);
        return handler.handleRequest.bind(handler);
    }
    listen(port) {
        const actualPort = port ?? parseInt(process.env.PORT ?? "9080");
        this.builder.rlog.info(`Listening on ${actualPort}...`);
        const server = http2.createServer(this.http2Handler());
        return new Promise((resolve, reject) => {
            let failed = false;
            server.once("error", (e) => {
                failed = true;
                reject(e);
            });
            server.listen(actualPort, () => {
                if (failed) {
                    return;
                }
                const address = server.address();
                if (address === null || typeof address === "string") {
                    reject(new TypeError("endpoint.listen() currently supports only binding to a PORT"));
                }
                else {
                    resolve(address.port);
                }
            });
        });
    }
}
exports.NodeEndpoint = NodeEndpoint;
//# sourceMappingURL=node_endpoint.js.map