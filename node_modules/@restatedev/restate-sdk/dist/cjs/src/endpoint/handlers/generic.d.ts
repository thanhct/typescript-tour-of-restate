/// <reference types="node" />
import type { ProtocolMode } from "../../types/discovery.js";
import type { EndpointBuilder } from "../endpoint_builder.js";
import { type ReadableStream } from "node:stream/web";
import * as vm from "./vm/sdk_shared_core_wasm_bindings.js";
export interface Headers {
    [name: string]: string | string[] | undefined;
}
export interface ResponseHeaders {
    [name: string]: string;
}
export interface AdditionalContext {
    [name: string]: string;
}
export interface RestateRequest {
    readonly url: string;
    readonly headers: Headers;
    readonly body: ReadableStream<Uint8Array> | null;
    readonly extraArgs: unknown[];
}
export interface RestateResponse {
    readonly headers: ResponseHeaders;
    readonly statusCode: number;
    readonly body: ReadableStream<Uint8Array>;
}
export declare enum ServiceDiscoveryProtocolVersion {
    /**
     * @generated from enum value: SERVICE_DISCOVERY_PROTOCOL_VERSION_UNSPECIFIED = 0;
     */
    SERVICE_DISCOVERY_PROTOCOL_VERSION_UNSPECIFIED = 0,
    /**
     * initial service discovery protocol version using endpoint_manifest_schema.json
     *
     * @generated from enum value: V1 = 1;
     */
    V1 = 1
}
export interface RestateHandler {
    handle(request: RestateRequest, context?: AdditionalContext): Promise<RestateResponse>;
}
/**
 * This is an internal API to support 'fetch' like handlers.
 * It supports both request-reply mode and bidirectional streaming mode.
 *
 * An individual handler will have to convert the shape of the incoming request
 * to a RestateRequest, and then pass it to this handler, and eventually convert back
 * the response.
 * Different runtimes have slightly different shapes of the incoming request, and responses.
 */
export declare class GenericHandler implements RestateHandler {
    readonly endpoint: EndpointBuilder;
    private readonly protocolMode;
    private readonly identityVerifier?;
    constructor(endpoint: EndpointBuilder, protocolMode: ProtocolMode);
    handle(request: RestateRequest, context?: AdditionalContext): Promise<RestateResponse>;
    private _handle;
    private validateConnectionSignature;
    private handleInvoke;
    private handleDiscovery;
    private toErrorResponse;
}
export declare function vm_log(level: vm.LogLevel, str: string): void;
//# sourceMappingURL=generic.d.ts.map