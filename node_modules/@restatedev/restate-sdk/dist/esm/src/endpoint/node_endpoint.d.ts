/// <reference types="node" resolution-mode="require"/>
import type { RestateEndpoint, ServiceBundle } from "../public_api.js";
import type { ServiceDefinition, VirtualObjectDefinition, WorkflowDefinition } from "@restatedev/restate-sdk-core";
import type { Http2ServerRequest, Http2ServerResponse } from "http2";
import type { Component } from "../types/components.js";
import type { Logger } from "../logger.js";
export declare class NodeEndpoint implements RestateEndpoint {
    private builder;
    get keySet(): string[];
    componentByName(componentName: string): Component | undefined;
    addComponent(component: Component): void;
    bindBundle(services: ServiceBundle): RestateEndpoint;
    bind<P extends string, M>(definition: ServiceDefinition<P, M> | VirtualObjectDefinition<P, M> | WorkflowDefinition<P, M>): RestateEndpoint;
    withIdentityV1(...keys: string[]): RestateEndpoint;
    setLogger(logger: Logger): RestateEndpoint;
    http2Handler(): (request: Http2ServerRequest, response: Http2ServerResponse) => void;
    lambdaHandler(): (event: any, ctx: any) => Promise<any>;
    listen(port?: number): Promise<number>;
}
//# sourceMappingURL=node_endpoint.d.ts.map