import type { ServiceDefinition, VirtualObjectDefinition, WorkflowDefinition } from "@restatedev/restate-sdk-core";
import type { Component } from "../types/components.js";
import type { RestateEndpointBase, ServiceBundle } from "../endpoint.js";
import type { Logger } from "../logger.js";
/**
 * LambdaEndpoint encapsulates all the Restate services served by this endpoint.
 *
 *
 * @example
 * A typical endpoint served as Lambda would look like this:
 * ```
 * import * as restate from "@restatedev/restate-sdk/lambda";
 *
 * export const handler = restate
 *   .endpoint()
 *   .bind(myService)
 *   .handler();
 */
export interface LambdaEndpoint extends RestateEndpointBase<LambdaEndpoint> {
    handler(): (event: any, ctx: any) => Promise<any>;
}
export declare class LambdaEndpointImpl implements LambdaEndpoint {
    private builder;
    get keySet(): string[];
    componentByName(componentName: string): Component | undefined;
    addComponent(component: Component): void;
    bindBundle(services: ServiceBundle): LambdaEndpoint;
    bind<P extends string, M>(definition: ServiceDefinition<P, M> | VirtualObjectDefinition<P, M> | WorkflowDefinition<P, M>): LambdaEndpoint;
    withIdentityV1(...keys: string[]): LambdaEndpoint;
    setLogger(logger: Logger): LambdaEndpoint;
    handler(): (event: any, ctx: any) => Promise<any>;
}
//# sourceMappingURL=lambda_endpoint.d.ts.map