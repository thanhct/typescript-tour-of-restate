/// <reference types="node" />
import type { ServiceDefinition, VirtualObjectDefinition, WorkflowDefinition } from "@restatedev/restate-sdk-core";
import type { Component } from "../types/components.js";
import type { RestateEndpointBase, ServiceBundle } from "../endpoint.js";
import { ProtocolMode } from "../types/discovery.js";
import type { Logger } from "../logger.js";
/**
 * Generic Fetch encapsulates all the Restate services served by this endpoint.
 *
 *
 * @example
 * A typical request-response handler would look like this:
 * ```
 * import * as restate from "@restatedev/restate-sdk/fetch";
 *
 * export default restate
 *   .endpoint()
 *   .bind(myService)
 *   .handler();
 * @example
 * A typical bidirectional handler (works with http2 and some http1.1 servers) would look like this:
 * ```
 * import * as restate from "@restatedev/restate-sdk/fetch";
 *
 * export default restate
 *   .endpoint()
 *   .bidirectional()
 *   .bind(myService)
 *   .handler();
 */
export interface FetchEndpoint extends RestateEndpointBase<FetchEndpoint> {
    handler(): {
        fetch: (request: Request, ...extraArgs: unknown[]) => Promise<Response>;
    };
    bidirectional(set?: boolean): FetchEndpoint;
}
export declare class FetchEndpointImpl implements FetchEndpoint {
    private protocolMode;
    constructor(protocolMode: ProtocolMode);
    private builder;
    get keySet(): string[];
    componentByName(componentName: string): Component | undefined;
    addComponent(component: Component): void;
    bindBundle(services: ServiceBundle): FetchEndpoint;
    bind<P extends string, M>(definition: ServiceDefinition<P, M> | VirtualObjectDefinition<P, M> | WorkflowDefinition<P, M>): FetchEndpoint;
    withIdentityV1(...keys: string[]): FetchEndpoint;
    setLogger(newLogger: Logger): FetchEndpoint;
    bidirectional(set?: boolean): FetchEndpoint;
    handler(): {
        fetch: (request: Request, ...extraArgs: unknown[]) => Promise<Response>;
    };
}
//# sourceMappingURL=fetch_endpoint.d.ts.map