export interface RestateContext {
}
export interface RestateObjectContext {
}
export interface RestateObjectSharedContext {
}
export interface RestateWorkflowSharedContext extends RestateObjectSharedContext {
}
export interface RestateWorkflowContext extends RestateObjectContext, RestateWorkflowSharedContext {
}
export type ServiceHandler<F, C = RestateContext> = F extends (ctx: C) => Promise<any> ? F : F extends (ctx: C, input: any) => Promise<any> ? F : never;
export type ServiceDefinition<P extends string, M> = {
    name: P;
};
export type Service<M> = M extends ServiceDefinition<string, infer S> ? S : M;
export type ServiceDefinitionFrom<M> = M extends ServiceDefinition<string, unknown> ? M : ServiceDefinition<string, M>;
export type ObjectSharedHandler<F, SC = RestateObjectSharedContext> = F extends (ctx: SC, param: any) => Promise<any> ? F : F extends (ctx: SC) => Promise<any> ? F : never;
export type ObjectHandler<F, C = RestateObjectContext> = F extends (ctx: C, param: any) => Promise<any> ? F : F extends (ctx: C) => Promise<any> ? F : never;
export type VirtualObjectDefinition<P extends string, M> = {
    name: P;
};
export type VirtualObject<M> = M extends VirtualObjectDefinition<string, infer O> ? O : never;
export type VirtualObjectDefinitionFrom<M> = M extends VirtualObjectDefinition<string, unknown> ? M : VirtualObjectDefinition<string, M>;
export type WorkflowSharedHandler<F, SC = RestateWorkflowSharedContext> = F extends (ctx: SC, param: any) => Promise<any> ? F : F extends (ctx: SC) => Promise<any> ? F : never;
export type WorkflowHandler<F, C = RestateWorkflowContext> = F extends (ctx: C, param: any) => Promise<any> ? F : F extends (ctx: C) => Promise<any> ? F : never;
export type WorkflowDefinition<P extends string, M> = {
    name: P;
};
export type Workflow<M> = M extends WorkflowDefinition<string, infer W> ? W : M;
export type WorkflowDefinitionFrom<M> = M extends WorkflowDefinition<string, unknown> ? M : WorkflowDefinition<string, M>;
//# sourceMappingURL=core.d.ts.map