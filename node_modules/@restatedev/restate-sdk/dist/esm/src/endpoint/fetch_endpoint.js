/*
 * Copyright (c) 2023-2024 - Restate Software, Inc., Restate GmbH
 *
 * This file is part of the Restate SDK for Node.js/TypeScript,
 * which is released under the MIT license.
 *
 * You can find a copy of the license in file LICENSE in the root
 * directory of this repository or package, or at
 * https://github.com/restatedev/sdk-typescript/blob/main/LICENSE
 */
import { EndpointBuilder } from "./endpoint_builder.js";
import { GenericHandler } from "./handlers/generic.js";
import { fetcher } from "./handlers/fetch.js";
import { ProtocolMode } from "../types/discovery.js";
export class FetchEndpointImpl {
    protocolMode;
    constructor(protocolMode) {
        this.protocolMode = protocolMode;
    }
    builder = new EndpointBuilder();
    get keySet() {
        return this.builder.keySet;
    }
    componentByName(componentName) {
        return this.builder.componentByName(componentName);
    }
    addComponent(component) {
        this.builder.addComponent(component);
    }
    bindBundle(services) {
        services.registerServices(this);
        return this;
    }
    bind(definition) {
        this.builder.bind(definition);
        return this;
    }
    withIdentityV1(...keys) {
        this.builder.withIdentityV1(...keys);
        return this;
    }
    setLogger(newLogger) {
        this.builder.setLogger(newLogger);
        return this;
    }
    bidirectional(set = true) {
        this.protocolMode = set
            ? ProtocolMode.BIDI_STREAM
            : ProtocolMode.REQUEST_RESPONSE;
        return this;
    }
    handler() {
        const genericHandler = new GenericHandler(this.builder, this.protocolMode);
        return fetcher(genericHandler);
    }
}
//# sourceMappingURL=fetch_endpoint.js.map