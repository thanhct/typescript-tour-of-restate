/// <reference types="node" />
export declare enum RestateLogLevel {
    TRACE = "trace",
    DEBUG = "debug",
    INFO = "info",
    WARN = "warn",
    ERROR = "error"
}
export declare function logLevel(level: RestateLogLevel): number;
export type LogParams = {
    source: LogSource;
    level: RestateLogLevel;
    replaying: boolean;
    context?: LoggerContext;
};
export type Logger = (params: LogParams, message?: any, ...optionalParams: any[]) => void;
export declare const DEFAULT_LOGGER_LOG_LEVEL: RestateLogLevel;
export declare const defaultLogger: Logger;
export declare class LoggerContext {
    readonly invocationId: string;
    readonly additionalContext?: {
        [name: string]: string;
    } | undefined;
    readonly fqMethodName: string;
    constructor(invocationId: string, packageName: string, serviceName: string, handlerName: string, additionalContext?: {
        [name: string]: string;
    } | undefined);
}
export declare enum LogSource {
    SYSTEM = "SYSTEM",
    JOURNAL = "JOURNAL",
    USER = "USER"
}
export declare function createRestateConsole(logger: Logger, source: LogSource, context?: LoggerContext, isReplaying?: () => boolean): Console;
//# sourceMappingURL=logger.d.ts.map