/**
 * Setups the WASM module
 */
export function start(): void;
/**
 * @param {LogLevel} level
 */
export function set_log_level(level: Readonly<{
    TRACE: 0;
    0: "TRACE";
    DEBUG: 1;
    1: "DEBUG";
    INFO: 2;
    2: "INFO";
    WARN: 3;
    3: "WARN";
    ERROR: 4;
    4: "ERROR";
}>): void;
/**
 */
export const LogLevel: Readonly<{
    TRACE: 0;
    0: "TRACE";
    DEBUG: 1;
    1: "DEBUG";
    INFO: 2;
    2: "INFO";
    WARN: 3;
    3: "WARN";
    ERROR: 4;
    4: "ERROR";
}>;
/**
 */
export class WasmHeader {
    static __wrap(ptr: any): any;
    static __unwrap(jsValue: any): number;
    /**
     * @param {string} key
     * @param {string} value
     */
    constructor(key: string, value: string);
    __destroy_into_raw(): number;
    __wbg_ptr: number;
    free(): void;
    /**
     * @returns {string}
     */
    get key(): string;
    /**
     * @returns {string}
     */
    get value(): string;
}
/**
 */
export class WasmIdentityVerifier {
    /**
     * @param {(string)[]} keys
     */
    constructor(keys: (string)[]);
    __destroy_into_raw(): number;
    __wbg_ptr: number;
    free(): void;
    /**
     * @param {string} path
     * @param {(WasmHeader)[]} headers
     */
    verify_identity(path: string, headers: (WasmHeader)[]): void;
}
/**
 */
export class WasmInput {
    static __wrap(ptr: any): any;
    __destroy_into_raw(): number | undefined;
    __wbg_ptr: number | undefined;
    free(): void;
    /**
     * @returns {string}
     */
    get invocation_id(): string;
    /**
     * @returns {string}
     */
    get key(): string;
    /**
     * @returns {(WasmHeader)[]}
     */
    get headers(): WasmHeader[];
    /**
     * @returns {Uint8Array}
     */
    get input(): Uint8Array;
}
/**
 */
export class WasmResponseHead {
    static __wrap(ptr: any): any;
    __destroy_into_raw(): number | undefined;
    __wbg_ptr: number | undefined;
    free(): void;
    /**
     * @returns {number}
     */
    get status_code(): number;
    /**
     * @returns {(WasmHeader)[]}
     */
    get headers(): WasmHeader[];
}
/**
 */
export class WasmVM {
    /**
     * @param {(WasmHeader)[]} headers
     */
    constructor(headers: (WasmHeader)[]);
    __destroy_into_raw(): number;
    __wbg_ptr: number;
    free(): void;
    /**
     * @returns {WasmResponseHead}
     */
    get_response_head(): WasmResponseHead;
    /**
     * @param {Uint8Array} buffer
     */
    notify_input(buffer: Uint8Array): void;
    /**
     */
    notify_input_closed(): void;
    /**
     * @param {string} error_message
     * @param {string | undefined} [error_description]
     */
    notify_error(error_message: string, error_description?: string | undefined): void;
    /**
     * @returns {any}
     */
    take_output(): any;
    /**
     * @returns {boolean}
     */
    is_ready_to_execute(): boolean;
    /**
     * @param {number} handle
     */
    notify_await_point(handle: number): void;
    /**
     * @param {number} handle
     * @returns {WasmAsyncResultValue}
     */
    take_async_result(handle: number): WasmAsyncResultValue;
    /**
     * @returns {WasmInput}
     */
    sys_input(): WasmInput;
    /**
     * @param {string} key
     * @returns {number}
     */
    sys_get_state(key: string): number;
    /**
     * @returns {number}
     */
    sys_get_state_keys(): number;
    /**
     * @param {string} key
     * @param {Uint8Array} buffer
     */
    sys_set_state(key: string, buffer: Uint8Array): void;
    /**
     * @param {string} key
     */
    sys_clear_state(key: string): void;
    /**
     */
    sys_clear_all_state(): void;
    /**
     * @param {bigint} millis
     * @returns {number}
     */
    sys_sleep(millis: bigint): number;
    /**
     * @param {string} service
     * @param {string} handler
     * @param {Uint8Array} buffer
     * @param {string | undefined} [key]
     * @returns {number}
     */
    sys_call(service: string, handler: string, buffer: Uint8Array, key?: string | undefined): number;
    /**
     * @param {string} service
     * @param {string} handler
     * @param {Uint8Array} buffer
     * @param {string | undefined} [key]
     * @param {bigint | undefined} [delay]
     */
    sys_send(service: string, handler: string, buffer: Uint8Array, key?: string | undefined, delay?: bigint | undefined): void;
    /**
     * @returns {WasmAwakeable}
     */
    sys_awakeable(): WasmAwakeable;
    /**
     * @param {string} id
     * @param {Uint8Array} buffer
     */
    sys_complete_awakeable_success(id: string, buffer: Uint8Array): void;
    /**
     * @param {string} id
     * @param {WasmFailure} value
     */
    sys_complete_awakeable_failure(id: string, value: WasmFailure): void;
    /**
     * @param {string} key
     * @returns {number}
     */
    sys_get_promise(key: string): number;
    /**
     * @param {string} key
     * @returns {number}
     */
    sys_peek_promise(key: string): number;
    /**
     * @param {string} key
     * @param {Uint8Array} buffer
     * @returns {number}
     */
    sys_complete_promise_success(key: string, buffer: Uint8Array): number;
    /**
     * @param {string} key
     * @param {WasmFailure} value
     * @returns {number}
     */
    sys_complete_promise_failure(key: string, value: WasmFailure): number;
    /**
     * @param {string} name
     * @returns {WasmRunEnterResult}
     */
    sys_run_enter(name: string): WasmRunEnterResult;
    /**
     * @param {Uint8Array} buffer
     * @returns {number}
     */
    sys_run_exit_success(buffer: Uint8Array): number;
    /**
     * @param {WasmFailure} value
     * @returns {number}
     */
    sys_run_exit_failure(value: WasmFailure): number;
    /**
     * @param {string} error_message
     * @param {string | undefined} error_description
     * @param {bigint} attempt_duration
     * @param {WasmExponentialRetryConfig} config
     * @returns {number}
     */
    sys_run_exit_failure_transient(error_message: string, error_description: string | undefined, attempt_duration: bigint, config: WasmExponentialRetryConfig): number;
    /**
     * @param {Uint8Array} buffer
     */
    sys_write_output_success(buffer: Uint8Array): void;
    /**
     * @param {WasmFailure} value
     */
    sys_write_output_failure(value: WasmFailure): void;
    /**
     */
    sys_end(): void;
    /**
     * @returns {boolean}
     */
    is_processing(): boolean;
    /**
     * @returns {boolean}
     */
    is_inside_run(): boolean;
    /**
     * @param {Uint32Array} handles
     * @returns {number | undefined}
     */
    sys_try_complete_all_combinator(handles: Uint32Array): number | undefined;
    /**
     * @param {Uint32Array} handles
     * @returns {number | undefined}
     */
    sys_try_complete_any_combinator(handles: Uint32Array): number | undefined;
    /**
     * @param {Uint32Array} handles
     * @returns {number | undefined}
     */
    sys_try_complete_all_settled_combinator(handles: Uint32Array): number | undefined;
    /**
     * @param {Uint32Array} handles
     * @returns {number | undefined}
     */
    sys_try_complete_race_combinator(handles: Uint32Array): number | undefined;
}
//# sourceMappingURL=sdk_shared_core_wasm_bindings.d.ts.map