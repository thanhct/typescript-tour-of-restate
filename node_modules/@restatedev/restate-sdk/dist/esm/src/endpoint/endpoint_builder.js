/*
 * Copyright (c) 2023-2024 - Restate Software, Inc., Restate GmbH
 *
 * This file is part of the Restate SDK for Node.js/TypeScript,
 * which is released under the MIT license.
 *
 * You can find a copy of the license in file LICENSE in the root
 * directory of this repository or package, or at
 * https://github.com/restatedev/sdk-typescript/blob/main/LICENSE
 */
import { HandlerWrapper } from "../types/rpc.js";
import { ServiceComponent, VirtualObjectComponent, WorkflowComponent, } from "../types/components.js";
import { LogSource, createRestateConsole, defaultLogger, } from "../logger.js";
function isServiceDefinition(m) {
    return m && m.service !== undefined;
}
function isObjectDefinition(m) {
    return m && m.object !== undefined;
}
function isWorkflowDefinition(m) {
    return m && m.workflow !== undefined;
}
export class EndpointBuilder {
    services = new Map();
    logger = defaultLogger;
    /**
     * This is a simple console without contextual info.
     *
     * This should be used only in cases where no contextual info is available.
     */
    rlog = createRestateConsole(this.logger, LogSource.SYSTEM);
    _keySet = [];
    get keySet() {
        return this._keySet;
    }
    componentByName(componentName) {
        return this.services.get(componentName);
    }
    addComponent(component) {
        this.services.set(component.name(), component);
    }
    bind(definition) {
        if (isServiceDefinition(definition)) {
            const { name, service } = definition;
            if (!service) {
                throw new TypeError(`no service implementation found.`);
            }
            this.bindServiceComponent(name, service);
        }
        else if (isObjectDefinition(definition)) {
            const { name, object } = definition;
            if (!object) {
                throw new TypeError(`no object implementation found.`);
            }
            this.bindVirtualObjectComponent(name, object);
        }
        else if (isWorkflowDefinition(definition)) {
            const { name, workflow } = definition;
            if (!workflow) {
                throw new TypeError(`no workflow implementation found.`);
            }
            this.bindWorkflowObjectComponent(name, workflow);
        }
        else {
            throw new TypeError("can only bind a service or a virtual object or a workflow definition");
        }
        return this;
    }
    withIdentityV1(...keys) {
        this._keySet.push(...keys);
        return this;
    }
    setLogger(newLogger) {
        this.logger = newLogger;
        this.rlog = createRestateConsole(this.logger, LogSource.SYSTEM);
        return this;
    }
    computeDiscovery(protocolMode) {
        const services = [...this.services.values()].map((c) => c.discovery());
        const endpoint = {
            protocolMode,
            minProtocolVersion: 2,
            maxProtocolVersion: 2,
            services,
        };
        return endpoint;
    }
    bindServiceComponent(name, router) {
        if (name.indexOf("/") !== -1) {
            throw new Error("service name must not contain any slash '/'");
        }
        const component = new ServiceComponent(name);
        for (const [route, handler] of Object.entries(router)) {
            const wrapper = HandlerWrapper.fromHandler(handler);
            if (!wrapper) {
                throw new TypeError(`${route} is not a restate handler.`);
            }
            wrapper.bindInstance(router);
            component.add(route, wrapper);
        }
        this.addComponent(component);
    }
    bindVirtualObjectComponent(name, router) {
        if (name.indexOf("/") !== -1) {
            throw new Error("service name must not contain any slash '/'");
        }
        const component = new VirtualObjectComponent(name);
        for (const [route, handler] of Object.entries(router)) {
            const wrapper = HandlerWrapper.fromHandler(handler);
            if (!wrapper) {
                throw new TypeError(`${route} is not a restate handler.`);
            }
            wrapper.bindInstance(router);
            component.add(route, wrapper);
        }
        this.addComponent(component);
    }
    bindWorkflowObjectComponent(name, workflow) {
        if (name.indexOf("/") !== -1) {
            throw new Error("service name must not contain any slash '/'");
        }
        const component = new WorkflowComponent(name);
        for (const [route, handler] of Object.entries(workflow)) {
            const wrapper = HandlerWrapper.fromHandler(handler);
            if (!wrapper) {
                throw new TypeError(`${route} is not a restate handler.`);
            }
            wrapper.bindInstance(workflow);
            component.add(route, wrapper);
        }
        this.addComponent(component);
    }
}
//# sourceMappingURL=endpoint_builder.js.map