"use strict";
/*
 * Copyright (c) 2023-2024 - Restate Software, Inc., Restate GmbH
 *
 * This file is part of the Restate SDK for Node.js/TypeScript,
 * which is released under the MIT license.
 *
 * You can find a copy of the license in file LICENSE in the root
 * directory of this repository or package, or at
 * https://github.com/restatedev/sdk-typescript/blob/main/LICENSE
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CombineablePromise = void 0;
const context_impl_js_1 = require("./context_impl.js");
exports.CombineablePromise = {
    /**
     * Creates a Promise that is resolved with an array of results when all of the provided Promises
     * resolve, or rejected when any Promise is rejected.
     *
     * See {@link Promise.all} for more details.
     *
     * @param values An iterable of Promises.
     * @returns A new Promise.
     */
    all(values) {
        if (values.length === 0) {
            return Promise.all(values);
        }
        return context_impl_js_1.ContextImpl.createCombinator("All", values);
    },
    /**
     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved
     * or rejected.
     *
     * See {@link Promise.race} for more details.
     *
     * @param values An iterable of Promises.
     * @returns A new Promise.
     */
    race(values) {
        if (values.length === 0) {
            return Promise.race(values);
        }
        return context_impl_js_1.ContextImpl.createCombinator("Race", values);
    },
    /**
     * Creates a promise that fulfills when any of the input's promises fulfills, with this first fulfillment value.
     * It rejects when all the input's promises reject (including when an empty iterable is passed),
     * with an AggregateError containing an array of rejection reasons.
     *
     * See {@link Promise.any} for more details.
     *
     * @param values An iterable of Promises.
     * @returns A new Promise.
     */
    any(values) {
        if (values.length === 0) {
            return Promise.any(values);
        }
        return context_impl_js_1.ContextImpl.createCombinator("Any", values);
    },
    /**
     * Creates a promise that fulfills when all the input's promises settle (including when an empty iterable is passed),
     * with an array of objects that describe the outcome of each promise.
     *
     * See {@link Promise.allSettled} for more details.
     *
     * @param values An iterable of Promises.
     * @returns A new Promise.
     */
    allSettled(values) {
        if (values.length === 0) {
            return Promise.allSettled(values);
        }
        return context_impl_js_1.ContextImpl.createCombinator("AllSettled", values);
    },
};
//# sourceMappingURL=context.js.map